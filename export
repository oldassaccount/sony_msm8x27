#!/bin/bash
LC_ALL=C date +%Y-%m-%d
toolchain="/home/spinxo/linaro-4.6.2/bin/arm-eabi"
build=/home/spinxo/out
kernel="rubik"
version="1.0.0"
rom="cm-11.0"
vendor="sony"
device="nicki"
date=`date +%Y%m%d`
ramdisk=ramdisk
config="rubik_nicki_defconfig"
kerneltype="zImage"
jobcount="-j$(grep -c ^processor /proc/cpuinfo)"
ps=4096
base=0x80200000
ramdisk_offset=0x02000000
cmdline="console=ttyHSL0,115200,n8 androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x3F ehci-hcd.park=3 androidboot.selinux=permissive"

function cleanme {
	if [ -f arch/arm/boot/"$kerneltype" ]; then
		echo "  CLEAN   zip"
	fi
	rm -rf zip/boot.img
	rm -rf arch/arm/boot/"$kerneltype"
	rm -rf zip/system
	mkdir -p zip/system/lib/modules
	make clean && make mrproper
	echo "Working directory cleaned..."
}

rm -rf out
mkdir out
mkdir out/tmp
echo "Checking for build..."
if [ -f zip/boot.img ]; then
	read -p "Previous build found, clean working directory..(y/n)? : " cchoice
	case "$cchoice" in
		y|Y )
			cleanme;;
		n|N )
			exit 0;;
		* )
			echo "Invalid...";;
	esac
	read -p "Begin build now..(y/n)? : " dchoice
	case "$dchoice" in
		y|Y)
			make "$config"
			make "$jobcount"
			exit 0;;
		n|N )
			exit 0;;
		* )
			echo "Invalid...";;
	esac
fi
echo "Extracting files..."
if [ -f arch/arm/boot/"$kerneltype" ]; then
	cp arch/arm/boot/"$kerneltype" out
	rm -rf zip/system
	mkdir -p zip/system/lib/modules
	find . -name '*.ko' -exec cp {} zip/system/lib/modules/ \; &> /dev/null
	$toolchain-strip --strip-unneeded zip/system/lib/modules/wlan.ko &> /dev/null
else
	echo "Nothing has been made..."
	read -p "Clean working directory..(y/n)? : " achoice
	case "$achoice" in
		y|Y )
			cleanme;;
		n|N )
			exit 0;;
		* )
			echo "Invalid...";;
	esac
	read -p "Begin build now..(y/n)? : " bchoice
	case "$bchoice" in
		y|Y)
			make "$config"
			make "$jobcount"
			exit 0;;
		n|N )
			exit 0;;
		* )
			echo "Invalid...";;
	esac
fi

echo "Making ramdisk..."
if [ -d $ramdisk ]; then
	boot_tools/mkbootfs $ramdisk | gzip > out/ramdisk.gz
else
	echo "No ramdisk found..."
	exit 0;
fi

echo "Making boot.img..."
if [ -f out/"$kerneltype" ]; then
	boot_tools/mkbootimg --kernel out/"$kerneltype" --ramdisk out/ramdisk.gz --cmdline "$cmdline" --base $base --pagesize $ps --ramdisk_offset $ramdisk_offset --output zip/boot.img
else
	echo "No $kerneltype found..."
	exit 0;
fi

echo "Zipping..."
if [ -f arch/arm/boot/"$kerneltype" ]; then
	cd zip
	zip -r ../"$kernel"-$version-"$rom"_"$vendor"_"$device"_"$date".zip .
	mv ../"$kernel"-$version-"$rom"_"$vendor"_"$device"_"$date".zip $build
	cd ..
	echo "Done..."
	exit 0;
else
	echo "No $kerneltype found..."
	exit 0;
fi
# Export script by Savoca
# Thank You Savoca!
